apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: fbc-fragment-build
spec:
  description: |
    This pipeline is ideal for building and verifying [file-based catalogs](https://konflux-ci.dev/docs/advanced-how-tos/building-olm.adoc#building-the-file-based-catalog).

    _Uses `buildah` to create a container image. Its build-time tests are limited to verifying the included catalog and do not scan the image.
    This pipeline is pushed as a Tekton bundle to [quay.io](https://quay.io/repository/konflux-ci/tekton-catalog/pipeline-fbc-builder?tab=tags)_
  finally:
  - name: show-sbom
    params:
    - name: IMAGE_URL
      value: $(tasks.build-image-index.results.IMAGE_URL)
    taskRef:
      params:
      - name: name
        value: show-sbom
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-show-sbom:0.1@sha256:04f15cbce548e1db7770eee3f155ccb2cc0140a6c371dc67e9a34d83673ea0c0
      - name: kind
        value: task
      resolver: bundles
  - name: send-slack-notification
    params:
    - name: message
      value: "$(tasks.rhoai-init.results.slack-message-failure-text)"
    - name: secret-name
      value: rhoai-konflux-secret
    - name: key-name
      value: slack-webhook
    taskRef:
      params:
      - name: name
        value: slack-webhook-notification
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-slack-webhook-notification:0.1@sha256:dc17b70633363d78414b8c06dc1660d25742935f106a6116995638e1210c2730
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(tasks.status)
      operator: in
      values:
      - "Failed"
  - name: share-fbc-details
    params:
    - name: message
      value: "$(tasks.prepare-slack-message.results.slack-message-sucess-text)"
    - name: secret-name
      value: rhoai-konflux-secret
    - name: key-name
      value: slack-webhook
    taskRef:
      params:
      - name: name
        value: slack-webhook-notification
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-slack-webhook-notification:0.1@sha256:dc17b70633363d78414b8c06dc1660d25742935f106a6116995638e1210c2730
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(tasks.status)
      operator: in
      values:
      - "Completed"
      - "Succeeded"
    - input: $(params.is_nightly)
      operator: in
      values:
      - true
  - name: trigger-conforma
    when:
    - input: $(params.is_nightly)
      operator: in
      values:
      - true
    params:
    - name: workflow_url
      value: "$(params.workflow_url)"
    taskSpec:
      params:
      - name: workflow_url
        type: string
      steps:
      - name: trigger-workflow
        image: quay.io/centos/centos:stream9
        env:
        - name: TARGET_BRANCH
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['build.appstudio.redhat.com/target_branch']
        - name: WORKFLOW_URL
          value: "$(params.workflow_url)"
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: rhods-ci
              key: secret
        script: |
          #!/bin/bash
          set -e
  
          OWNER="red-hat-data-services"
          REPO="conforma-reporter"
          WORKFLOW_FILE="conforma-reporter.yaml"
          
          echo "Target branch is: '$TARGET_BRANCH'"
          echo "Triggering Conforma workflow for branch: $TARGET_BRANCH"
  
          curl -X POST "https://api.github.com/repos/$OWNER/$REPO/actions/workflows/$WORKFLOW_FILE/dispatches" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{ "ref": "main", "inputs": { "snapshot_target": "'"$TARGET_BRANCH"'" } }'

  - name: trigger-smoke
    when:
    - input: $(params.is_nightly)
      operator: in
      values:
      - true
    params:
    - name: smoke_url
      value: "$(params.smoke_url)"
    taskSpec:
      params:
      - name: smoke_url
        type: string
      steps:
      - name: trigger-workflow
        image: quay.io/centos/centos:stream9
        env:
        - name: TARGET_BRANCH
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['build.appstudio.redhat.com/target_branch']
        - name: SMOKE_URL
          value: "$(params.smoke_url)"
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: rhods-ci
              key: secret
        script: |
          #!/bin/bash
          set -e
  
          OWNER="red-hat-data-services"
          REPO="conforma-reporter"
          WORKFLOW_FILE="smoke-trigger.yaml"
          
          echo "Target branch is: '$TARGET_BRANCH'"
          echo "Triggering Conforma workflow for branch: $TARGET_BRANCH"
  
          curl -X POST "https://api.github.com/repos/$OWNER/$REPO/actions/workflows/$WORKFLOW_FILE/dispatches" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{ "ref": "main", "inputs": { "target_branch": "'"$TARGET_BRANCH"'" } }'
          
  - name: custom-task
    params:
    - name: pipelinerun-name
      value: "$(context.pipelineRun.name)"
    - name: fbc-check-status
      value: "$(tasks.validate-fbc.status)"
    - name: overall-task-status
      value: "$(tasks.status)"
    taskSpec:
      steps:
      - image: quay.io/rhoai-konflux/alpine:latest
        name: rhoai-init
        script: |
          pipelinerun_name=$(params.pipelinerun-name)
          fbc_check_status=$(params.fbc-check-status)
          overall_task_status=$(params.overall-task-status)

          echo "pipelinerun-name = $pipelinerun_name"
          echo "fbc_check_status = $fbc_check_status"
          echo "overall_task_status-name = $overall_task_status"
   
  params:
  - description: Source Repository URL
    name: git-url
    type: string
  - default: ""
    description: Revision of the Source Repository
    name: revision
    type: string
  - description: Fully Qualified Output Image
    name: output-image
    type: string
  - default: .
    description: Path to the source code of an application's component from where to build image.
    name: path-context
    type: string
  - default: Dockerfile
    description: Path to the Dockerfile inside the context specified by parameter path-context
    name: dockerfile
    type: string
  - default: "false"
    description: Force rebuild image
    name: rebuild
    type: string
  - default: "false"
    description: Skip checks against built image
    name: skip-checks
    type: string
  - default: "true"
    description: Execute the build with network isolation
    name: hermetic
    type: string
  - default: ""
    description: Build dependencies to be prefetched by Cachi2
    name: prefetch-input
    type: string
  - name: prefetch-log-level
    default: "info"
    type: string
    description: Set cachi2 log level (debug, info, warning, error)
  - name: prefetch-config-file-content
    default: ""
    type: string
    description: Pass configuration to cachi2. Note this needs to be passed as a YAML-formatted config dump, not as a file path!
  - default: ""
    description: Image tag expiration time, time values could be something like 1h, 2d, 3w for hours, days, and weeks, respectively.
    name: image-expires-after
  - default: "true"
    description: Build a source image.
    name: build-source-image
    type: string
  - default: "true"
    description: Add built image into an OCI image index
    name: build-image-index
    type: string
  - default: []
    description: Array of --build-arg values ("arg=value" strings) for buildah
    name: build-args
    type: array
  - default: ""
    description: Path to a file with build arguments for buildah, see https://www.mankier.com/1/buildah-build#--build-arg-file
    name: build-args-file
    type: string
  - default: "does-not-exist" 
    description: Kubernetes secret to mount into build, see https://www.redhat.com/en/blog/sensitive-data-containers 
    name: additional-build-secret
    type: string
  - default: "synk-secret"
    description: Synk Token Secret Name
    name: synk-secret
  - default:
    - linux/x86_64
    description: List of platforms to build the container images on. The available set of values is determined by the configuration of the multi-platform-controller.
    name: build-platforms
    type: array
  - description: Additional labels to add to build image
    name: additional-labels
    type: array
    default: []
  - description: Additional tags to push for build image
    name: additional-tags
    type: array
    default: []
  - description: Fetch all tags for the repo
    name: fetch-git-tags
    type: string
    default: "false"
  - description: Perform a shallow clone, fetching only the most recent N commits
    name: clone-depth
    type: string
    default: "1"
  - name: is_nightly
    type: string
    default: false
    description: Run conforma and smoke tests if nightly
  - name: workflow_url
    type: string
    description: "URL of the workflow to trigger"
    default: "https://github.com/red-hat-data-services/conforma-reporter/actions/workflows/conforma-reporter.yaml"
  - name: smoke_url
    type: string
    description: "smoke url of the workflow to trigger"
    default: "https://github.com/red-hat-data-services/conforma-reporter/actions/workflows/smoke-trigger.yaml"
  results:
  - description: ""
    name: IMAGE_URL
    value: $(tasks.build-image-index.results.IMAGE_URL)
  - description: ""
    name: IMAGE_DIGEST
    value: $(tasks.build-image-index.results.IMAGE_DIGEST)
  - description: ""
    name: CHAINS-GIT_URL
    value: $(tasks.clone-repository.results.url)
  - description: ""
    name: CHAINS-GIT_COMMIT
    value: $(tasks.clone-repository.results.commit)
  tasks:
  - name: rhoai-init
    taskSpec:
      results:
      - description: Notification text to be posted to slack
        name: slack-message-failure-text
      - description: Skip slack message
        name: skip-slack-message
      steps:
      - image: quay.io/rhoai-konflux/alpine:latest
        name: rhoai-init
        env:
        - name: slack_message
          valueFrom:
            secretKeyRef:
              name: rhoai-konflux-secret
              key: slack-component-failure-notification
        - name: target_branch
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['build.appstudio.redhat.com/target_branch']
        - name: CLUSTER
          valueFrom:
            secretKeyRef:
              name: rhoai-konflux-secret
              key: CLUSTER
        - name: BUILD_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['pipelinesascode.tekton.dev/log-url']
        - name: SHA_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['pipelinesascode.tekton.dev/sha-url']
        - name: SUMMARY_ANNOTATIONS
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['results.tekton.dev/recordSummaryAnnotations']
        script: |
          echo "build-url = $BUILD_URL"
          echo "sha-url = $SHA_URL"
          pipelinerun_name=$(echo $BUILD_URL | sed 's|http.*/||')
          echo "pipelinerun-name = $pipelinerun_name"

          if echo "$BUILD_URL" | grep -F -v "$CLUSTER"; then
            echo "Build URL does not match expected cluster $CLUSTER."
            echo -n "true" > "$(results.skip-slack-message.path)"
          else
            echo -n "false" > "$(results.skip-slack-message.path)"
          fi
          build_time="$(date +%Y-%m-%dT%H:%M:%S)"

          slack_message=${slack_message/__BUILD__URL__/$BUILD_URL}
          slack_message=${slack_message/__PIPELINERUN__NAME__/$pipelinerun_name}
          slack_message=${slack_message/__BUILD__TIME__/$build_time}

          # don't notify devops team on pull request pipelines
          if [[ "$SUMMARY_ANNOTATIONS" =~ "pull_request-id" ]]; then
            echo "pull request pipeline detected"
            slack_message=$(echo $slack_message | sed 's/CC - .*devops.*$//')
          fi
          echo -en "${slack_message}" > "$(results.slack-message-failure-text.path)"
  - name: init
    params:
    - name: image-url
      value: $(params.output-image)
    - name: rebuild
      value: $(params.rebuild)
    - name: skip-checks
      value: $(params.skip-checks)
    taskRef:
      params:
      - name: name
        value: init
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-init:0.2@sha256:aac8127bc10c95fae3ca1248c1dd96576315f3313bca90c5c9378dbf37954a08
      - name: kind
        value: task
      resolver: bundles
    runAfter:
    - rhoai-init
  - name: clone-repository
    params:
    - name: url
      value: $(params.git-url)
    - name: revision
      value: $(params.revision)
    - name: ociStorage
      value: $(params.output-image).git
    - name: ociArtifactExpiresAfter
      value: $(params.image-expires-after)
    - name: fetchTags
      value: $(params.fetch-git-tags)
    - name: depth
      value: $(params.clone-depth)
    runAfter:
    - init
    taskRef:
      params:
      - name: name
        value: git-clone-oci-ta
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-git-clone-oci-ta:0.1@sha256:0761f97595d42c87c076797e0d0f66ff572146cad958106b7f5446b182d03394
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(tasks.init.results.build)
      operator: in
      values:
      - "true"
    workspaces:
    - name: basic-auth
      workspace: git-auth
  - name: prefetch-dependencies
    params:
    - name: input
      value: $(params.prefetch-input)
    - name: dev-package-managers
      value: "true"
    - name: SOURCE_ARTIFACT
      value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
    - name: ociStorage
      value: $(params.output-image).prefetch
    - name: ociArtifactExpiresAfter
      value: $(params.image-expires-after)
    - name: log-level
      value: $(params.prefetch-log-level)
    - name: config-file-content
      value: $(params.prefetch-config-file-content)
    runAfter:
    - clone-repository
    taskRef:
      params:
      - name: name
        value: prefetch-dependencies-oci-ta
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-prefetch-dependencies-oci-ta:0.2@sha256:153ef0382deef840d155f5146f134f39b480523a7d5c38ba9fea2b58792dd4b5
      - name: kind
        value: task
      resolver: bundles
    workspaces:
    - name: git-basic-auth
      workspace: git-auth
    - name: netrc
      workspace: netrc
  - matrix:
      params:
      - name: PLATFORM
        value:
        - $(params.build-platforms)
    name: build-images
    timeout: 4h
    params:
    - name: ADDITIONAL_SECRET
      value: $(params.additional-build-secret)
    - name: IMAGE
      value: $(params.output-image)
    - name: DOCKERFILE
      value: $(params.dockerfile)
    - name: CONTEXT
      value: $(params.path-context)
    - name: HERMETIC
      value: $(params.hermetic)
    - name: PREFETCH_INPUT
      value: $(params.prefetch-input)
    - name: IMAGE_EXPIRES_AFTER
      value: $(params.image-expires-after)
    - name: COMMIT_SHA
      value: $(tasks.clone-repository.results.commit)
    - name: BUILD_ARGS
      value:
      - $(params.build-args[*])
    - name: BUILD_ARGS_FILE
      value: $(params.build-args-file)
    - name: LABELS
      value:
      - $(params.additional-labels[*])
      - url=$(params.git-url)
      - release=$(tasks.clone-repository.results.commit-timestamp)
      - git.url=$(params.git-url)
      - git.commit=$(params.revision)
    - name: SOURCE_ARTIFACT
      value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
    - name: CACHI2_ARTIFACT
      value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
    - name: IMAGE_APPEND_PLATFORM
      value: "true"
    runAfter:
    - prefetch-dependencies
    taskRef:
      params:
      - name: name
        value: buildah-remote-oci-ta
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-buildah-remote-oci-ta:0.4@sha256:b9e92097becdb770689ed554b67e5fe9017576af252f317db51aba68d8894523
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(tasks.init.results.build)
      operator: in
      values:
      - "true"
  - name: build-image-index
    params:
    - name: IMAGE
      value: $(params.output-image)
    - name: COMMIT_SHA
      value: $(tasks.clone-repository.results.commit)
    - name: IMAGE_EXPIRES_AFTER
      value: $(params.image-expires-after)
    - name: ALWAYS_BUILD_INDEX
      value: $(params.build-image-index)
    - name: IMAGES
      value:
      - $(tasks.build-images.results.IMAGE_REF[*])
    runAfter:
    - build-images
    taskRef:
      params:
      - name: name
        value: build-image-index
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-build-image-index:0.1@sha256:70f2fe8ab9909c2bc8bb853ed5b880969f0de5022658f3af86f7dea15f95ff73
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(tasks.init.results.build)
      operator: in
      values:
      - "true"
  - name: fbc-fips-check-oci-ta
    params:
    - name: image-digest
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: SOURCE_ARTIFACT
      value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: fbc-fips-check-oci-ta
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-fbc-fips-check-oci-ta:0.1@sha256:2bc6985a2bd9379ddd3d0ce4343580517bb1a10ffdb7036aa3dd2bbe1943cc0a
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
  - name: sast-shell-check
    params:
    - name: image-digest
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: SOURCE_ARTIFACT
      value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
    - name: CACHI2_ARTIFACT
      value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: sast-shell-check-oci-ta
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-sast-shell-check-oci-ta:0.1@sha256:57b3262138eb06186ae7375f84ca53788bba2a66cfd03d39cb82c78df050aba5
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
    workspaces: []
  - name: sast-unicode-check
    params:
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: SOURCE_ARTIFACT
      value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
    - name: CACHI2_ARTIFACT
      value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: sast-unicode-check-oci-ta
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-sast-unicode-check-oci-ta:0.2@sha256:df185dbe4e2852668f9c46f938dd752e90ea9c79696363378435a6499596c319
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
    workspaces: []
  - name: deprecated-base-image-check
    params:
    - name: IMAGE_URL
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: IMAGE_DIGEST
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: deprecated-image-check
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-deprecated-image-check:0.5@sha256:eb8136b543147b4a3e88ca3cc661ca6a11e303f35f0db44059f69151beea8496
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
  - name: apply-tags
    params:
    - name: IMAGE
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: ADDITIONAL_TAGS
      value:
      - $(params.additional-tags[*])
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: apply-tags
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-apply-tags:0.1@sha256:4973fa42a8f06238613447fbdb3d0c55eb2d718fd16f2f2591a577c29c1edb17
      - name: kind
        value: task
      resolver: bundles
  - name: validate-fbc
    params:
    - name: IMAGE_URL
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: IMAGE_DIGEST
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: validate-fbc
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-validate-fbc:0.1@sha256:2233c5f1d69b6d3059c79cb62f551dca7e986334fc37fe1e28a35901feae0da3
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
  - name: fbc-target-index-pruning-check
    params:
    - name: IMAGE_URL
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: IMAGE_DIGEST
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    - name: TARGET_INDEX
      value: registry.redhat.io/redhat/redhat-operator-index
    - name: RENDERED_CATALOG_DIGEST
      value: $(tasks.validate-fbc.results.RENDERED_CATALOG_DIGEST)
    runAfter:
    - validate-fbc
    taskRef:
      params:
      - name: name
        value: fbc-target-index-pruning-check
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-fbc-target-index-pruning-check:0.1@sha256:a4d0bedb2aeed06d060b5a38f3dc020625e1c11665fc1a0317765c1f90edb485
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
  - name: prepare-slack-message
    params:
    - name: pipelinerun-name
      value: "$(context.pipelineRun.name)"
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: image-digest
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    - name: is_nightly
      value: $(params.is_nightly)
    taskSpec:
      results:
      - description: Notification text to be posted to slack
        name: slack-message-sucess-text
      steps:
      - image: quay.io/rhoai-konflux/alpine:latest
        name: rhoai-init
        env:
        - name: is_nightly
          value: $(params.is_nightly)
        - name: target_branch
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['build.appstudio.redhat.com/target_branch']
        - name: CLUSTER
          valueFrom:
            secretKeyRef:
              name: rhoai-konflux-secret
              key: CLUSTER
        - name: BUILD_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['pipelinesascode.tekton.dev/log-url']
        script: |
          pipelinerun_name=$(params.pipelinerun-name)
          echo "pipelinerun-name = $pipelinerun_name"

          application_name=${target_branch/rhoai-/}
          application_name=rhoai-v${application_name/./-}
          echo "application-name = $application_name"

          component_name=${pipelinerun_name/-on-*/}
          echo "component-name = $component_name"

          build_time="$(date +%Y-%m-%dT%H:%M:%S)"
          if [[ "$is_nightly" == "true" ]]; then
            alertEmoji=":nightly:"
            slack_message="${alertEmoji} A new *nightly build* is available for ${target_branch}: ${build_time}"
          else
            alertEmoji=":solid-success:"
            slack_message="${alertEmoji} A new CI build is available for ${target_branch}: ${build_time}"
          fi

          # slack_message=$(echo -e "${slack_message}\nCC - <@U04KZMFDZ2T>")
          slack_message=$(echo -e "${slack_message}\nImage: $(params.image-url)@$(params.image-digest)")
          slack_message=$(echo -e "${slack_message}\n<${BUILD_URL}|${pipelinerun_name}>")

          echo -n "${slack_message}" > "$(results.slack-message-sucess-text.path)"
    runAfter:
    - build-image-index
  workspaces:
  - name: git-auth
    optional: true
  - name: netrc
    optional: true
